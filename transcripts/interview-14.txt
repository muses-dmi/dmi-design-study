---
# Note: This is a metadata section formatted in YAML. This document can be rendered as markdown for better readability.

participant: 14
role: Composer & Instrument Builder
experience(years): 10
instrument_count: 20

instruments:
 - Lightdome
 - concertronica
 - eggiophone
 - the chromatic
 - the sonic bonnet

langugaes:
 - c++ (arduino)
 - max

---
 
# Why do you use your chosen programming language(s)?

Sure, that's right, yeah.

Um, that's pretty much just where I landed. So

I've,

I haven't

I haven't ever formally studied any kind of digital digital instrument design or you know, any any sort of instrument design in that way I did an undergrad degree in popular music practice, there was a module in that called Live electronics that that looks at max MSP. So that's that sort of, as far as any kind of formal education I've had, I've had in it. But I really loved the flexibility of Max and, and how it sort of, you know, allowed me to try and build something that didn't already exist. So that was sort of my way into it is that I was having to use a lot of kind of, I was having to sort of make do with software that was out there. So I was using aspects of Ableton and reason and that kind of thing on stage. So everything from my sort of design point of view, all comes from performance, I very much come from the background of a performer and a composer rather than an instrument maker. But as a sort of laptop musician, or a digital musician, or sort of more apt to kind of like digital live performer. I felt that the tools at my fingertips, you know, this software, like Ableton or reason that I was using, didn't quite allow me to do what I wanted to do on the stage, it was more than sufficient in the studio as a producer and a composer. And that's what I used for writing my tracks. But once I got on the stage, I felt I was quite limited for how I could turn use that software to turn my music into an engaging performance. And it was only when I was introduced to max MSP, that I was able to kind of plug those gaps really. So a lot of what I do to write my music, for example, is using sort of found sound material, everyday objects to then create kind of dance beats or you know, kind of sequence and sample material. So whereas in the studio, that's obviously very easy to kind of do take a microphone to do that stuff. But I wanted to be able to impart some of that process onstage to my audience to kind of let them in and break down some of that barrier. And if the sounds are just already, you know, pre loaded and pre recorded into my software, and I'm just playing them out, and maybe I'm messing with, you know, how they're sequenced, or effects or whatever it is. It just didn't, it didn't feel enough, it didn't get the, you know, sort of my excitement of working those sound working with those sounds over to over to my audience. So I was able to build the first sort of instrument I built was just a patch on max MSP, that allowed me to, you know, actually physically have these objects on stage and be able to go to the microphone and record them. It was a it was a kind of, like, a bit like a sequencer that had a that was triggering a bunch of samplers, but the samplers just had no sound in them. So I already have my beats pre programmed, but no sounds in the samplers. And I'd go up to the microphone, take an object whenever it was like a piece of paper or some sellotape or something And it would start recording once the input level hit over certain volume threshold, and then it would put it in a sampler. So it's a very quick way of being able to really visually and sonically show the audience, my process of how I was, I was kind of creating music. And that's what I was really into in the studio. And that's what I wanted to be able to understand. So that's, that's really how I sort of started my love of wanting to build my own instrument. And it was through an necessity really, there was something that I wasn't quite able to do with what was there. And it was a very specific thing, you know, it's just this one thing that I wanted to be able to do. And obviously, through building your own thing, you can do it, you can, you know, achieve like, exactly one goal that you want to do. And so yeah, sorry, can you repeat the question? 

> How did you then transition into the world of, for example, using Arduino and specifically the programming languages associated with that?

So once I'd then built a few software instruments, or, you know, software devices in in max.

I was very quickly because I, because I'm so sort of, I tried to be so physical onstage as a performer. And one of the things that it's, you know, arguably hard to be as physical when you're using a laptop as your main instrument, you know, I don't have a drum kit that I can, I can smash, or a guitar that I can jump around the stage with. So, very quickly, my question that I was always wanting to answer it was okay, how can I bring more physicality to a laptop performance, and, you know, laptops being incredibly powerful machines that allow us to do really new things with sound and music and technology that we're not able to do, you know, two years ago, five years ago, and, you know, it's, it's sort of put us at the, at the vanguard and the front of a kind of music performance. But yet really inhibitors because we're kind of only able to use the tools that are on offer, you know, you still see people doing laptop performances, just using the mouse and the trackpad, and, you know, not even a kind of MIDI controller plugged in. So I think a lot about my MIDI controller setup, but then again, it's a similar thing, I was finding that the the off the shelf options, the keyboards, the, the buttons, the knobs that it just wasn't quite doing it for me. And actually, that I found that through the likes of platforms like Arduino, I can make a MIDI controller that is exactly the layout that I need. So I started with that with, you know, using the usual tools in the SAT using using potentiometers and, and buttons and, and switches, and that kind of thing. But just building it into a bespoke layout. So it was exactly how I wanted it for my particular setup. And then from there, what felt really exciting to me was like, well, well, what are the sensors are there what are the are the kind of analogue tools that then can be converted into digital signal that then I can use to control control my music software, and that's where it got really exciting and still remains really exciting for me is, is being able to then build controllers that are in in as themselves kind of objects of curiosity. So I feel like when I do performances with my instruments, now, the audience doesn't have to know anything about the software I'm using. They don't have to need to have don't have to know anything about music technology at all. But they know that when so one of my instruments I've built is called the conceptronic. And it's it's some strings on a pulley system that are turning potentiometers. But somebody so I can map it to control that whatever I want as it's a MIDI controller. So let's say I have it sort of on a filter that that's coming in and out. It's, you know, the audience, then there's someone in the audience who has no prior knowledge of any of the hardware or the software or even any sort of music technology at all, they can see the physical action that I'm making, and they can hear the sound that it's controlling. And again, being able to sort of break down that barrier between me as a performer and particularly, you know, digital laptop performer, with an audience member and let them in to the process that I'm doing is is kind of key to the way that I that I want to work that I try to work.

> We'll explore some of those ideas a little more in some later questions. Just briefly to round this question. How did you come to use c++? Did you learn to programme just because that's what the platform required? Or did you have prior experience or?

Yeah, exactly that basically, um, you know, in this regard, I can feel slightly imposter syndrome slightly in that, you know, as I say, I haven't done a sort of music computing degree, or I haven't ever done any courses to learn coding in any particular language at all, it's always very, very much been kind of hand to mouth I've been, you know, it's like, I want to learn, I want to be able to build this particular instrument I've got in mind or this particular project. So I'll learn as much as I need to have whatever hardware or software is it to kind of achieve that and get me there. So I wouldn't really ever dare to describe myself as as a as a coder or a programmer of any particular language. Particularly not in the circles. And as I imagine, I don't know, whether it's fair at all, but I imagine the other people that you're interviewing as part of this study are probably, you know, far, far, far more sort of versed in in kind of coding and language and that kind of thing than I am. Yeah, I've been very much a kind of just learn it bit by bit as I need it. Rather than rather than kind of, you know, sort of deciding that I'm going to become a coder or a programmer.

> Yeah. And have you just used online sources to do that?

Yeah, and that's what I've found to be really wonderful about the the Arduino community or the max community is that it is so open, it's, you know, the resources for learning are just vast, and people are really up for sharing. You know, one of the things like when I first started learning Max, there was no max for live. But Ableton was my main software for using on stage. And I had to kind of cobble together using rewire and that kind of thing cobbled together a really ropey set up. And as soon as max for live came out, it was just, like, totally changed. Everything that I have to do is absolutely wonderful. But one of the great things about you know, if you just look at Ableton and look at max and Max for live and compare those things, Ableton use this kind of very slick, very closed book, it's just like, it's this, this wonderful thing that's been made, and quite prescribed, as, you know, most sort of music software is in that way. Whereas max for live, it's like people are actively wanting to show their show and share their work, they often give their patches away for free or if not for free, it's kind of pay what you want. It's I love that aspect of the community. You know, it's all about sharing. And even when when I did do that module on max MSP way back when you weren't encouraged it, you weren't supposed to build a patch completely from scratch, you were actively encouraged. say, look, we're not just going to teach you the software from scratch, you're actually like, the way this works is you go and find things that other practitioners that other people have already used, and you borrow bits of it, that's sort of how max works is that you go, Okay, well, if I'm wanting to build, for example of the thing that I build, which is, you know, this the sequencer with the with the audio threshold, triggering that kind of thing. The thing that didn't exist, for me was the kind of the audio triggering and the sampling side of it. So there was no point in me learning how to build a sequencer from scratch, because that already existed. So I was able to just bring that in very quickly. And it was to do the very sort of specific fiddly bits that I had that I had to learn to do. And that's something that yeah, that's really, really important from

from,

from the community based around that kind of software is that there's so much resource out there for for you to be able to kind of learn from the ground up

> I think you've touched on some ideas for this, this next question, which will regard both hardware and software tools.
# Why do you use your chosen tools for instrument design?

So the one that I haven't mentioned yet, is the teensy board. So originally, Arduino was sort of my way into sort of building hardware stir, which was really just because that was the one that I'd heard of. That's the one that people were kind of talking about and seem to be most used. And so I spent some time getting my head around the different Arduino board. And you know why you might use them for different applications. And then a friend of mine who was also building instruments, he recommended the teensy board for me. And the main. The main reason was being that with all the Arduino instruments that I was building, I was also having to build a max patch, to take the OSC information, turn it into MIDI information and then send it to Ableton or whatever music software I was using, whereas the teensy board had the ability to go straight to USB MIDI. And so you can just programme it within the code. And it's still, it's still used the the Arduino programming environment, so I didn't need to sort of relearn anything there. Other than if you have, you know, sort of teensy specific libraries. But the fact that you could yet be able to get it to go straight to USB, MIDI was a huge reason sort of move over to teensy, it's also plug and play as well, there's no drivers at all. And so, you know, I was able to, for example, lend one of my instruments to a friend of mine, for them to use in their Ableton set, and they didn't have, you know, they can literally just plug it in, and it just appears straight as a MIDI device in Ableton that was actually quite groundbreaking in my mind when that when that happened, because it always felt like to be able to get this stuff to work. There's always a bit of fiddly back end stuff. And it's, you know, having this max patch open to speak to Ableton at the same time. And it's the kind of thing that if I would always need to be there and present if one of my instruments was being used, because I'm the only person who knows how it all works kind of thing. But as soon as this happened. So, you know, I've done a few commissions of building instruments for people along the way, and because of that, I can just send it to them, they plug it straight in and just appear. So that's a massive reason for using the into using the teensy board. Yeah.

> So largely, you're focused on just designing controllers, and then using tools that are available and exist for the sound synthesis portion?

Yes, that's right. And so I mainly work with with audio, as in as in audio in samples, as opposed to sort of synthesis. And, again, I'm not trying to reinvent the wheel at any at any point, you know, like Ableton is wonderful, its its functionality for sampling stuff is it is really great. So I will use that as much as I can. It's just the it's just the, you know, the analogue to digital interaction and how I control that, that I'm needing to use my my sort of instruments for and then if there is something on the software side, that doesn't quite work the way I want it to, then I have max for live and all the backend API that that, that that allows to. And to kind of control the software side of it as well. 

> What about physical tools like and of course, there's the the, sort of typical music technology aspect that we've discussed, but what about, you know, the physical building of these instruments as well? What tools do you use in that process?

That's a lot of fun, because that varies all the time. So when I first started building, that sort of more standard layout MIDI controllers, I would I would go to I used to live in South London at a time, I'd go down to depth of market on a Saturday morning. And just by generally sort of cigar boxes and those kinds of things, it would i would buy sort of wooden wooden boxes that I would use to kind of how's how's my instrument, mainly because they're easy to sort of drill into, you know, all I had was was, you know, sort of a soldering iron, a drill and some some very sort of basic bits. Again, you know, that that sort of physical design layout is something that I've just sort of had to learn as I as I sort of go along, there have been a few things that have been more challenging. The conceptronic are one that I'm that I talked about before I built this thing called the echo phone as well, which is using conductive paint. And I painted a bunch of eggs, it could be any object at all, but sort of using conductive paint to be able to work with something that's I guess, like a non traditional object or a non traditional shape. So you know, it doesn't. The great thing about painting It can be any any object at all, and you just paint it. And then that becomes the controller. And something I built last year. It's called the light dome, which is a, a kind of distance distance sensor instrument. And I've got one that I'm building here at the moment, which is, it's built into a, it's built into a glass lampshade. And I needed to be able to drill holes in the glass to be able to put an ultrasonic sensor so that it would fit in. So that was a new, a new challenge for me is to work out how to drill into quite thick glass without shattering the glass. So getting like diamond drill bit that you sort of drill underneath, underneath a cold water tap. So yeah, challenges like that. Fun, I like sort of working out, there's a lot of trial and error, there's a lot of things breaking and having to try and try and you know, find new parts. But luckily, again, all of that stuff is if it's the actual the sort of the housing or I guess, like the non electronic part of it, you know, whatever it's going to kind of live in is generally, you know, repurposed materials, so a lampshade or the, you know, these plastic eggs from the IKEA firms sitting? fit in a candle holder, that's what I sort of used as the, again, you know, I'm not, I'm not a sort of welder or a kind of, like a, like a, I guess I kind of furniture design or anything like that I'm looking to kind of find an object that already exists and sort of think about how you can kind of adapt that and bring the technology into it to kind of use it in in a new way.

# Why did you chose your chosen platform(s) to build your instrument on?
> I think you again, you kind of covered that in the in the context of Teensy and Arduino. But I guess, OSX, or Windows or like an operating system might also come into that. But do you? Is there anything you'd add to why you choose your chosen platforms?

I don't think so. I

mean, yeah, I use I use OSX as my operating platform. I think. No, I mean, I think that's pretty. That's pretty covered. Yeah.

# Are there any other tools (software or otherwise) that you feel contributes significantly to your process?

Um,

I don't think so. I

mean, a lot of it, if I'm, if I'm looking to build a new instrument, it'll come through either some new material as into new music that I've written, maybe a new track, or if I'm doing a new release, I think, right, I don't just want to get on stage and do the same show and use the same instruments as I did the last time we did something. So I need to build something new. So it leads to come through a kind of, you know, a necessity like that. Or, materials wise, I'll come across a new sensor, I'll be introduced to a new sensor based on one or I'll find a new sensor on line or something like that. And I got our you know, that that's, that's triggered for me in my mind that I could turn that into an instrument. So in that way, it could be the it could be the technology or the material that that that I come across that that is sort of the catalyst in building something.

# What would be the biggest 'Quality of Life' improvement you could request from your tools for designing DMI?

That's a good question. I mean, one of the things that is really beneficial about teensy and Arduino boards and those kinds of things, is, is USB powering. So the majority of my instruments are powered through the USB, which is also obviously the data connection. I've built a few things that are required external power supplies. And that I mean, that's what adds another level of sort of safety that you need to be careful obviously, if you're using USB power, then you know, you're already sort of working at quite a safe and safe level safe environment. And so where I've worked with with within with things that have required additional power Yeah, I guess, you know, I, it would be good if if there was a quiet kind of an equivalent of kind of USB power that could be that could be kind of utilised across all of my, all of my projects.

> So like, where five volts just isn't enough sort of thing?

Yeah, exactly. Yeah. So, so I've done, I haven't done much, but I've done some stuff with robotics. And so I guess rather than kind of sending signal into my software, sending signals out from the software, and then controlling and controlling instrument with with solenoids, and that kind of thing, that requires some more power. And they always, I mean, maybe it's just a learning thing, maybe I need to, you know, that's kind of my next area that I need to kind of improve on. But I think also I liked the neatness of, of things just kind of running running from the USB power, you know, it's nice, to nice, simple way for kind of setup. But also, again, because I use because, you know, I'm an active performer with maintenance, whenever I kind of add a new instrument to my setup, it's another thing to sort of have onstage like my stage show, now it's pretty, pretty manic with stuff to kind of plug in. So anything that kind of makes that makes that kind of simpler and more straightforward, is, is is always useful. 

# How do you approach the design of a new instrument?

Yeah, so if it's, if it's from from the point I made before, if it's coming from like a new sensor. So for example, with these light dome, ones that I've been building, I did come across the sensor first I came across the ultrasonic sensor. And, you know, you start to think about how, like, if it's just on its own, and obviously like, it works like moving your hand further away from it, or moving an object closer and further away from it gets you the, you know, gets you the data gets you the gets you the kind of reading gets you the the performance element that you want from it, but you start to think okay, so if I just have one of them, that's fine. If I want to have more than one, where do they need to be? Where do they need to be? Where are they? Where do they need to be positioned? What's the layout? And you're like, Okay, so what would, I don't just want these things to be sat on breadboard with wires that you know, or even sold it up, but just kind of needs to look so neat, but it needs to look interesting. Like, I want it to be the kind of thing that if it's just sat there on stage, before I started my performance that the audience would be looking at it, you know, like a kind of objective curiosity like, what's that? How does that work? Like, how is that thing going to create music? Or, you know, for that already to be some some some sort of interest in engagement with it? So it's kind of thinking, What's the scan of like, utilising the technology? How do I get the most out of this to create this? Yeah, this sort of objective curiosity?

> Would you say that's very aesthetically driven? Almost?

Yeah, it totally is, it totally is that like, that's a really big part of, of what I do. And it's not just on a superficial level, it's not just for, it's not just so that it looks nice for the sake of looking nice, but it's like actively trying to, I think break out of a bit of where music technology and MIDI controllers in particular, have sort of, you know, come into a hole, like, if you go on, if you go on one of the, you know, like the digital, yeah, the kind of electronic music instruments, shops, like websites and type in MIDI controllers, or MIDI keyboards. You get, like, you know, 15 technology companies, all churning out things that look really similar, you know, there's not a huge amount of choice, you know, they all have a keyboard, they will have sliders or knobs, they will have buttons, there's not, you know, there's not a great amount of innovation, I don't think, you know, obviously, all these things are incredibly powerful and way more powerful than than the kind of things that I'm making, but it doesn't feel like we've moved on a huge amount in the kind of the commercial sector with MIDI controllers. So I think part of the, the aesthetic, you know, look of the instruments that I'm doing is trying to actively breakout from that and trying to make things that do look and work in a in a kind of unique way.

> Sounds like you're  saying that there's a whole component of the art that is making the instrument, in differentiating the instrument.

100% Yeah, and I think that's probably more where I would place myself within a kind of community. You know, like, a deaf, as I was saying before, I definitely wouldn't wouldn't kind of place myself as a coder or a programmer, you know, I really sort of know the kind of the bare minimum of what I need to know, in those areas. I think it's more, you know, more about the kind of the, you know, as you say, the kind of that call look of these, these things that I was that I would sort of place a lot of emphasis on my work. Okay. Oh, if I chat, if I say hi, will that pop up for you? Sorry. So I'm just on a call. Sure. So I can't

say that again.

# When creating a new instrument, what distinct aspects are required to realize the design and implementation?

Yeah, so I mean,

making sure that the technology works, you know, sort of same for that I wouldn't want to get on stage with my kind of breadboard design and use it in that way, it's really important that I kind of take it to a finish level. But absolutely, you need to make sure that that side of it is fully operational and functioning. Before I take it too far, you know, I have had times before where things have been working, all right, in my kind of prototyping stage. And then I've gone to a lot of effort to, you know, how's it in something that looks great. And then I've got to that stage and something's not working. And it's hard to unpick, you know, it's hard to go back. And that's something I've learned from, and I've really had to make sure that before I get too far, but I've also sort of tried to try to build it in so that I'm able to unpick things better and kind of go back sometimes that's not that possible. And so being really sure that the technology side is fully functioning and, and, and up and running a well tested before I sort of take it onto onto the next stage is is is very important. There's sort of nothing more frustrating than everything working. And then when you get to the final plugin, or the finished thing, it's like something's not working or like this one sensor is not coming through or whatever it is, you know, that's, that's, that's the worst.

> And any other distinct things other than that, that that are part of that process?

I mean, it's different every time. A lot of the a lot of the code that I used is tried and tested codes that are used for quite a while, you know, I'm always sort of, again, I'm never sort of going in code from scratch. I'm always I'm always, you know, sort of building on code that I've already used and kind of repurposing it. But yeah, I guess that's that's just sort of the same, the same answer really just sort of making sure that I'm really thorough in those early stages to avoid to avoid the pitfalls later on.

# What do you consider to be the biggest challenge when designing an instrument?

Biggest challenge?

I mean,

I think for me personally like the code is where I'm weakest. And I know that and it slows me down. And obviously, I could, I could try and get by that by sort of, you know, spending more time and learning it more. But you know, if I'm being totally honest, when I come up with an idea like that, when I come up with an idea to build something new, I love building it, and I want to get to the stage that I can perform with it. And anything that slows me down in that process is frustrating. So when you sort of map everything out, you're like, right, I'm going to use these sensors, or whatever it is, I'm going to breadboard it up, I'm going to prototype it, get it working, then I'm going to, you know, build it into this thing I've already found at a flea market on eBay, or whatever it is, and it's all laid out. And it feels like every step of the way is achievable and doable. And when you get caught out with a bit of code, or where something breaks, and you've only got one of them, and you've got to wait for another component to arrive from China, and it's gonna take three years or whatever it is. And that's, that's, that that can be really frustrating because it can, it just knocks you back, you know, like in your mind, you have this sort of plotted out on this trajectory. And by week on Friday, you're gonna have it working as a sort of same for a lot of the time is, you know, I'll have like a new instrument or set of sounds or a new song or something that I want to use it for. And I've already done that starts side of the process, because actually, a lot of my instruments are intrinsically linked to particular songs or particular sounds or software instrument. So because I've already done that side of the process, I'm itching to get playing with that. So actually, I'm really, in a, there's like an added sort of urgency to the build as well, because it's like, there's something ready for it to perform. It's not just building an instrument, and then going, Oh, now what am I going to use it for? I work very much in the reverse. So, yeah, um, one of the, one of the issues as well, this is something I've not talked about actually is, is compatibility, and that kind of thing. I so I, my concert ronica, which still to this day is probably the biggest project that I've undertaken, which is the thing I built with the strings on a pulley system. And that took a lot of time. And I use that for quite a lot of different projects. And I hadn't used it for quite a while. I hadn't used it for maybe four or five months as in, you know, I hadn't taken out of it Xbox and played it. And I had a gig coming up. And I thought right about have a bit of rehearsal, a bit of a refresh, and I plugged it in. And just nothing, nothing was talking to my Mac patch, which which it controls. And it was driving me mad, I couldn't work out at all. And what it turned out to be was that I upgraded my IDE, I upgraded the operating system, and upgraded OSX to whatever it was. And the new operating system had not put a few very key very tiny little Java files in the right place. They were on the system, just Ableton. Max was looking for them in the wrong place. And as soon as I just moved them into a different folder, it was totally fine. But that, that was like scary, you know, it's the kind of thing where like, you have a gig in two days time, and it's just nothing's working. And that was a bit of a nightmare. And it just, it feels like it really knocks you back because it feels like everything you've achieved with building this instrument and everywhere. You know, how far you've got, it feels like you've just you just have gone back a load of steps. And it's frustrating. It feels like you're having to redo things that you've already done. But it's just little tiny things like that. And I've you know, I've found that quite a bit like, I I will not upgrade my operating system if I can avoid it at all now, I mean, it's a nightmare for loads of things, even just drivers and that kind of thing for you know, interfaces and yeah, but that, that that that was probably that was one time where I just wished I was a drummer for a moment.

# What tools do (or could) play the biggest part in helping with these challenges?

Well, I guess that, you know, that's

the I guess the sort of the answer to that is sort of the fact that the way that we As digital instrument makers, the way that we work is just is that we have to use a lot of different companies technology, or a lot of different technology out there. And we really rely on it being able to be compatible and to interact with each other. And for when upgrades happen, and those kinds of things, that that compatibility remained the same. And we're just at the mercy, you know, like, if, if Apple suddenly decided that they fell out with Ableton in a big way, or that they just didn't want to use the software that interacts with c++ or Arduino or anything, then, you know, I don't know, I don't know what I do, I, you know, I'd be forced to make some major changes in my work in practice, we are at the mercy of, of, you know, software and technology that multiple other organisations or individuals are, are making.

So,

I mean, it's impossible, but if there is a way to streamline that, and sort of mitigate against that happening, then that, that that'd be pretty useful.

# How would you define a DMI?

Yeah, that's a really good question. Because actually, when you first got in touch, as I did some musical instrument, and you know, as soon as you think digital, you know, I'm almost more thinking software, Mac patches, plugins, those kinds of instruments, as opposed to my, because it's like, you know, you see, like physical and digital as being opposing things. But of course, my instruments that I build are very physical, but they are digital in the way that they were, you know, they, they're all MIDI controllers, they make no sound until they're plugged in, and their streams of zeros and ones bouncing back and forth to control whatever software that they are controlling. So, again, because I work with recorded material, found sound field recordings, as opposed to sort of synthesis, there's a very sort of organic quality to the electronic music that I make. So a combination of that, and the physical instrument, you know, and I work I, the housing that I use as sort of a lot of wood and that kind of thing, and, you know, not not not so much plastic. Again, I think it all kind of feeds into it, there's, there's quite a kind of organic physicality, to both the music that I make, and the instruments that I make, that feels

at odds with the word digital. And I don't see I don't see digital as a, as a

dirty word or a bad word or anything like that. But you know, it's almost that kind of like analogue versus digital people or in music technology, they always want analogue and like, I don't think they know why they want analogue. Everyone thinks they want analogue. And, and I think my practice plays into that a little bit as well, or, or does well off the back of that, you know. But, you know, the reality is, my instruments are our digital our digital instruments, that's how they act, how they function, you know, even if it's hidden under the hood, you know, it's in the, it's in the back end, it's in the, in the code as opposed to what's at the front.

# What concepts do you consider a DMI to be made up from?

Yeah, I mean, I guess, I guess, at its heart, there's, there's, well, if we think of what if we removed digital and just think of a musical instrument, like what is a musical instrument, a musical instrument is generally it's the movement of air, it's like, it's like vibrations through air. It's either, you know, pushing air through a trumpet or or using a string on a violin to vibrate. And so digital music instrument is It's sort of the absence of that, or it's the, it's the addition of sort of scrambling around for a word other than digital. But it's that really, it's, it's that for it to qualify as music, there's always going to be that movement of air with digital music instruments, it's probably coming out of speakers. But the control of that or how it comes out of the speakers is not controlled by the physicality of a musical instrument. But the Yeah, the kind of the kind of digital sequence. I mean, that's not a kind of, I feel like I know, I know how I want to describe it, but I can't quite get it out. But yeah, I feel I feel like the route to answering that question is like, well, what is a digital musical instrument compared to a traditional musical instrument? If we can answer that then that will answer that question, what I'm not talking about I'm not totally sure how to how to kind of get that. 

